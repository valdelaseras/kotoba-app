{"version":3,"file":"main.js","mappings":"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","sources":["./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/components/about/about.component.ts","./src/app/components/about/about.component.html","./src/app/components/decorator/footer/footer.component.ts","./src/app/components/decorator/footer/footer.component.html","./src/app/components/decorator/nav/nav.component.ts","./src/app/components/decorator/nav/nav.component.html","./src/app/components/decorator/secondary-nav/secondary-nav.component.ts","./src/app/components/decorator/secondary-nav/secondary-nav.component.html","./src/app/components/exam/exam.component.html","./src/app/components/exam/exam.component.ts","./src/app/components/landing/landing.component.ts","./src/app/components/landing/landing.component.html","./src/app/components/lobby/lobby.component.html","./src/app/components/lobby/lobby.component.ts","./src/app/components/login/login.component.html","./src/app/components/login/login.component.ts","./src/app/components/profile/profile.component.ts","./src/app/components/profile/profile.component.html","./src/app/components/score-history/score-history.component.html","./src/app/components/score-history/score-history.component.ts","./src/app/components/score-sheet/score-sheet/score-sheet.component.html","./src/app/components/score-sheet/score-sheet/score-sheet.component.ts","./src/app/components/settings/settings.component.html","./src/app/components/settings/settings.component.ts","./src/app/model/exam/exam.model.ts","./src/app/model/user/user.model.ts","./src/app/route-guard.ts","./src/app/services/dataset/data-set.service.ts","./src/app/services/exam/exam.service.ts","./src/app/services/settings/settings.service.ts","./src/app/services/user/user.service.ts","./src/environments/environment.ts","./src/main.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { AboutComponent } from './components/about/about.component';\nimport { ProfileComponent } from './components/profile/profile.component';\nimport { LobbyComponent } from './components/lobby/lobby.component';\nimport { LandingComponent } from './components/landing/landing.component';\nimport { ExamComponent } from './components/exam/exam.component';\nimport { ScoreHistoryComponent } from './components/score-history/score-history.component';\nimport { SettingsComponent } from './components/settings/settings.component';\nimport { ScoreSheetComponent } from './components/score-sheet/score-sheet/score-sheet.component';\nimport { ExamRouteGuard, LoggedInRouteGuard } from './route-guard';\n\nconst routes: Routes = [\n  { path: 'login', component: LandingComponent },\n  { path: 'about', component: AboutComponent },\n  { path: 'profile', component: ProfileComponent, canActivate: [LoggedInRouteGuard] },\n  { path: 'settings', component: SettingsComponent, canActivate: [LoggedInRouteGuard] },\n  { path: 'lobby', component: LobbyComponent, canActivate: [LoggedInRouteGuard] },\n  { path: 'exam', component: ExamComponent, canActivate: [LoggedInRouteGuard, ExamRouteGuard] },\n  { path: 'score/:timestamp', component: ScoreSheetComponent, canActivate: [LoggedInRouteGuard] },\n  { path: 'score-history', component: ScoreHistoryComponent, canActivate: [LoggedInRouteGuard] },\n  { path: '', pathMatch: 'full', redirectTo: 'lobby'}\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { UserService } from './services/user/user.service';\nimport { SettingsService } from './services/settings/settings.service';\nimport { ISettings } from './model/interfaces/settings.interface';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent implements OnInit {\n  title = 'kotoba-app';\n  settings: ISettings;\n\n  constructor( private router: Router,\n               private userService: UserService,\n               private settingService: SettingsService ) {\n    this.settings = this.settingService.getSettings();\n  }\n\n  ngOnInit(): void {\n  }\n\n  onLogin(): boolean {\n    return this.router.url.includes('login');\n  }\n\n  onActivate(): void {\n    window.scroll(0, 0 );\n  }\n}\n","<div [ngClass]=\"[settings.visualSettings.font, settings.visualSettings.fontSize, settings.visualSettings.theme]\" class=\"theme-settings\">\n  <app-nav [hidden]=\"onLogin()\"></app-nav>\n  <app-secondary-nav [hidden]=\"onLogin()\"></app-secondary-nav>\n  <main>\n    <section tabindex=\"0\" class=\"section\">\n      <div class=\"section-content\">\n        <div class=\"grid\">\n          <div class=\"column\">\n            <router-outlet (activate)=\"onActivate()\"></router-outlet>\n          </div>\n        </div>\n      </div>\n    </section>\n  </main>\n  <app-footer [hidden]=\"onLogin()\"></app-footer>\n</div>\n\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { HammerModule } from '@angular/platform-browser';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { NavComponent } from './components/decorator/nav/nav.component';\nimport { FooterComponent } from './components/decorator/footer/footer.component';\nimport { LobbyComponent } from './components/lobby/lobby.component';\nimport { LandingComponent } from './components/landing/landing.component';\nimport { ExamComponent } from './components/exam/exam.component';\nimport { ProfileComponent } from './components/profile/profile.component';\nimport { AboutComponent } from './components/about/about.component';\nimport { LoginComponent } from './components/login/login.component';\nimport { SettingsComponent } from './components/settings/settings.component';\nimport { ScoreHistoryComponent } from './components/score-history/score-history.component';\nimport { SecondaryNavComponent } from './components/decorator/secondary-nav/secondary-nav.component';\nimport { UserService } from './services/user/user.service';\nimport { ExamService } from './services/exam/exam.service';\nimport { DataSetService } from './services/dataset/data-set.service';\nimport { ScoreSheetComponent } from './components/score-sheet/score-sheet/score-sheet.component';\nimport { SettingsService } from './services/settings/settings.service';\nimport { ExamRouteGuard, LoggedInRouteGuard } from './route-guard';\nimport { ServiceWorkerModule } from '@angular/service-worker';\nimport { environment } from '../environments/environment';\n\nconst components = [\n  AppComponent,\n  NavComponent,\n  FooterComponent,\n  LobbyComponent,\n  LandingComponent,\n  ExamComponent,\n  ProfileComponent,\n  AboutComponent,\n  LoginComponent,\n  SettingsComponent,\n  ScoreHistoryComponent,\n  SecondaryNavComponent,\n  ScoreSheetComponent\n];\n\n@NgModule({\n  declarations: [\n    ...components,\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    HammerModule,\n    AppRoutingModule,\n    ServiceWorkerModule.register('ngsw-worker.js', { enabled: environment.production })\n  ],\n  providers: [\n    UserService,\n    ExamService,\n    SettingsService,\n    DataSetService,\n    ExamRouteGuard,\n    LoggedInRouteGuard\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-about',\n  templateUrl: './about.component.html',\n  styleUrls: ['./about.component.scss']\n})\nexport class AboutComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div id=\"about\">\n  <div class=\"column\">\n    <div class=\"content\">\n      <h1>About</h1>\n    </div>\n  </div>\n  <div class=\"column\">\n    <div class=\"column two\">\n      <div class=\"content\">\n        <fieldset>\n          <legend>\n            <h2>...the target user group</h2>\n          </legend>\n          <p>\n            Kotoba is intended for anyone who is in the tough process of cramming kana and kanji.\n          </p>\n        </fieldset>\n      </div>\n    </div>\n  </div>\n  <div class=\"column\">\n    <div class=\"column two\">\n      <div class=\"content\">\n        <fieldset>\n          <legend>\n            <h2>...the purpose</h2>\n          </legend>\n          <p>\n            Kotoba is intended to be used as an addition to your regular studies of the language. To put it simply,\n            it is a tool to test how well you have memorized kanji and kana and to help you cram by using the simple\n            method of repetition.\n          </p>\n        </fieldset>\n      </div>\n    </div>\n    <div class=\"column two\">\n      <div class=\"content\">\n        <fieldset>\n          <legend>\n            <h2>...the origin story</h2>\n          </legend>\n          <p>\n            Kotoba is a passion project created by <a class=\"highlight\" href=\"https://www.linkedin.com/in/robin-scholtes-488964115/\">me, Robin</a>.\n          </p>\n          <p>\n            Back around 2008 I studied Japanese in college. At the time, we didn't have a lot of great online tools at\n            our disposal to efficiently cram huge lists of words and kanji. We used to get creative and 'abuse' online\n            tools that were intended for other things, and manually typed up all the lists we needed!\n          </p>\n          <p>\n            While times and available tools are way different now and lots of great tools exist, I created Kotoba anyway as a\n            passion project once I started learning web development. Kotoba is one of my first projects and is basically\n            a manifestation of what I wish we had back in school ;)\n          </p>\n        </fieldset>\n      </div>\n    </div>\n  </div>\n</div>\n\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-footer',\n  templateUrl: './footer.component.html',\n  styleUrls: ['./footer.component.scss']\n})\nexport class FooterComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<footer id=\"footer\">\n  <div class=\"footer-content\">\n    <div class=\"grid\">\n      <div class=\"column\">\n        <div class=\"column two\">\n          <div class=\"content\">\n            <p>\n              Kotoba is a hobby project. It's not a proper and finished product, and more so used right now as\n              a part of my web development portfolio.\n            </p>\n            <p>\n              However, if you are a student of Japanese and somehow you found this tool and it is helping you cram,\n              I'm very happy it can be useful to you!\n            </p>\n            <p>\n              頑張ってね!\n            </p>\n          </div>\n        </div>\n        <div class=\"column two\">\n          <div class=\"content\">\n            <ul class=\"icon-list\">\n              <li>\n                <a class=\"icon-link\" href=\"https://github.com/valdelaseras/kotoba-app\">\n                  <img src=\"../../../../assets/logos/github.svg\"\n                       alt=\"Github logo\"\n                       title=\"Github\"\n                       class=\"invert-on-dark-theme\">\n                </a>\n              </li>\n              <li>\n                <a class=\"icon-link\" href=\"https://www.linkedin.com/in/robin-scholtes-488964115/\">\n                  <img src=\"../../../../assets/logos/linkedin.svg\"\n                       alt=\"Linkedin logo\"\n                       title=\"Linkedin\"\n                       class=\"invert-on-dark-theme\">\n                </a>\n              </li>\n              <li>\n                <a class=\"icon-link\" href=\"https://weird.io/en/home\">\n                  <img src=\"../../../../assets/logos/weird.svg\"\n                       alt=\"Weird logo\"\n                       title=\"Weird.io\"\n                       class=\"invert-on-dark-theme\">\n                </a>\n              </li>\n            </ul>\n            <ul>\n              <li>\n                <p>\n                  Feel free to drop me some feedback, ask a question or just to say hi!\n                </p>\n                <a href=\"mailto:robin@weird.io\">robin@weird.io</a>\n              </li>\n            </ul>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</footer>\n","import { Component, OnInit } from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { filter } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-nav',\n  templateUrl: './nav.component.html',\n  styleUrls: ['./nav.component.scss']\n})\nexport class NavComponent implements OnInit {\n  menuIsOpen = false;\n\n  constructor( private router: Router ) {\n    this.router.events.pipe(\n      filter( event => event instanceof NavigationEnd )\n    ).subscribe( ( event: NavigationEnd ) => {\n      this.menuIsOpen = false;\n    });\n  }\n\n  ngOnInit(): void {\n  }\n\n  onSwipeRight(): void {\n    if ( this.menuIsOpen === true ) {\n      this.menuIsOpen = false;\n    }\n  }\n}\n","<nav tabindex=\"0\" class=\"nav\">\n  <div class=\"branding-logo\">\n    <a title=\"Kotoba\" routerLink=\"/lobby\" routerLinkActive=\"active\">\n      <span class=\"bold\">言葉</span>\n    </a>\n  </div>\n\n  <ul class=\"nav-list desktop-only\">\n    <li>\n      <a class=\"nav-link\"\n         title=\"About\"\n         routerLink=\"/about\"\n         routerLinkActive=\"active\">About</a>\n    </li>\n    <li>\n      <a class=\"nav-link\"\n         title=\"Profile\"\n         routerLink=\"/profile\"\n         routerLinkActive=\"active\">Profile</a>\n    </li>\n  </ul>\n\n  <div class=\"mobile-menu mobile-only\">\n    <input type=\"checkbox\" id=\"nav-checkbox\" class=\"nav-checkbox\" [(ngModel)]=\"menuIsOpen\">\n    <label for=\"nav-checkbox\" class=\"nav-toggle\">\n      <span></span>\n      <span></span>\n      <span></span>\n    </label>\n    <div class=\"slide-in-menu\">\n      <ul class=\"mobile-nav-list\" (swiperight)=\"onSwipeRight()\">\n        <li>\n          <a class=\"nav-link\"\n             title=\"Lobby\"\n             routerLink=\"/lobby\"\n             routerLinkActive=\"active\">Lobby</a>\n        </li>\n        <li>\n          <a class=\"nav-link\"\n             title=\"Profile\"\n             routerLink=\"/profile\"\n             routerLinkActive=\"active\">Profile</a>\n        </li>\n        <li>\n          <a class=\"nav-link\"\n             title=\"Settings\"\n             routerLink=\"/settings\"\n             routerLinkActive=\"active\">Settings</a>\n        </li>\n        <li>\n          <a class=\"nav-link\"\n             title=\"Score history\"\n             routerLink=\"/score-history\"\n             routerLinkActive=\"active\">Score history</a>\n        </li>\n        <li>\n          <a class=\"nav-link\"\n             title=\"About\"\n             routerLink=\"/about\"\n             routerLinkActive=\"active\">About</a>\n        </li>\n      </ul>\n    </div>\n  </div>\n</nav>\n","import { Component, OnInit } from '@angular/core';\nimport { Location } from '@angular/common';\n\n@Component({\n  selector: 'app-secondary-nav',\n  templateUrl: './secondary-nav.component.html',\n  styleUrls: ['./secondary-nav.component.scss']\n})\nexport class SecondaryNavComponent implements OnInit {\n\n  constructor( private location: Location ) { }\n\n  ngOnInit(): void {\n  }\n\n  back(): void {\n      this.location.back();\n  }\n}\n","<nav>\n  <div class=\"grid\">\n    <div class=\"column\">\n      <div class=\"content\">\n        <ul class=\"btn-group\">\n          <li>\n            <button title=\"Back\" type=\"button\" (click)=\"back()\" class=\"btn btn-secondary\">Back</button>\n          </li>\n          <!--any additional buttons below might be dynamic maybe?-->\n          <li>\n            <button title=\"To lobby\" type=\"button\" routerLink=\"/lobby\" routerLinkActive=\"active\" class=\"btn btn-secondary\">Lobby</button>\n          </li>\n          <li>\n            <button title=\"To settings\" type=\"button\" routerLink=\"/settings\" routerLinkActive=\"active\" class=\"btn btn-secondary\">Settings</button>\n          </li>\n        </ul>\n      </div>\n    </div>\n  </div>\n</nav>\n\n\n\n\n\n","<div id=\"exam\" (window:resize)=\"onResize()\">\n  <div class=\"column\">\n    <div class=\"content\">\n      <h2>{{ exam.title }}</h2>\n    </div>\n  </div>\n  <div class=\"column\">\n    <div class=\"column two\">\n      <div class=\"content\">\n        <form #examForm=\"ngForm\" id=\"exam-form\" (ngSubmit)=\"submitForm()\">\n          <div class=\"form-group\">\n            <fieldset>\n              <legend>\n                <label for=\"question\">{{ currentQuestion.question }}</label>\n                <span *ngIf=\"currentQuestion.hint\">{{ currentQuestion.hint }}</span>\n              </legend>\n              <input id=\"question\"\n                     required\n                     #answer=\"ngModel\"\n                     name=\"answer\"\n                     autocomplete=\"off\"\n                     onInput=\"this.value = this.value.toLowerCase()\"\n                     [(ngModel)]=\"givenAnswer.entry\"\n                     [placeholder]=\"currentQuestion.placeholder | titlecase\"/>\n              <div class=\"column info-bar\">\n                <div class=\"column two\">\n                  <small>{{ attempt }} / {{ allowedRetries || '∞'}}</small>\n                </div>\n                <div class=\"column two\">\n                  <div class=\"incorrect-answer\" *ngIf=\"hasIncorrectAnswers()\">\n                    <small class=\"invalid-color\">\n                      <ng-container *ngIf=\"!multipleAnswersGiven() && numberOfIncorrectAnswers() > 0\">\n                        This answer is incorrect\n                      </ng-container>\n                      <ng-container *ngIf=\"multipleAnswersGiven() && numberOfIncorrectAnswers() > 0\">\n                        One or more answers are incorrect\n                      </ng-container>\n                    </small>\n                  </div>\n                </div>\n              </div>\n              <button type=\"submit\"\n                      class=\"btn btn-primary btn-main\"\n                      [disabled]=\"examForm.pristine || examForm.invalid\">\n                Submit\n              </button>\n            </fieldset>\n          </div>\n        </form>\n      </div>\n    </div>\n    <div class=\"column two\">\n      <div class=\"content\">\n        <fieldset>\n          <legend>\n            <h2>Stats</h2>\n          </legend>\n           <ul class=\"stats\">\n             <li>\n               <h4>Method</h4>\n               <span>{{ exam.settings.method }}</span>\n             </li>\n             <li>\n               <h4>Progress</h4>\n               <span>{{ exam.currentQuestionNumber() }}</span> of <span>{{ exam.getQuestions().length }}</span>\n             </li>\n             <!--<li>-->\n               <!--<h4>Attempts</h4>-->\n               <!--<span>{{ attempt }} / {{ allowedRetries || '∞'}}</span>-->\n             <!--</li>-->\n             <li>\n               <h4>Correct</h4>\n               <span>{{ exam.numberOfCorrectAnswers() }}</span>\n\n               <h4>Incorrect</h4>\n               <span>{{ exam.numberOfIncorrectAnswers() }}</span>\n             </li>\n           </ul>\n        </fieldset>\n      </div>\n    </div>\n  </div>\n</div>\n\n","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { IExamQuestion } from '../../model/interfaces/exam-question.interface';\nimport { IExamGivenAnswer } from '../../model/interfaces/exam-given-answer.interface';\nimport { IExamSettings } from '../../model/interfaces/exam-settings.interface';\n\nimport { Exam } from '../../model/exam/exam.model';\n\nimport { ExamService } from '../../services/exam/exam.service';\n\n@Component({\n  selector: 'app-exam',\n  templateUrl: './exam.component.html',\n  styleUrls: ['./exam.component.scss']\n})\nexport class ExamComponent implements OnInit {\n  exam: Exam;\n  currentQuestion: IExamQuestion;\n  givenAnswer: IExamGivenAnswer = {\n    entry: undefined,\n    valid: []\n  };\n  currentSettings: IExamSettings;\n  allowedRetries: number;\n  attempt = 0;\n\n  constructor( private examService: ExamService,\n               private router: Router ) {\n    this.exam = this.examService.getExam();\n    this.currentSettings = this.exam.settings;\n    this.allowedRetries = this.getAllowedRetries( this.currentSettings );\n  }\n\n  ngOnInit(): void {\n    this.currentQuestion = this.exam.getQuestion();\n  }\n\n  onResize(): void {\n    window.scroll(0, 0 );\n  }\n\n  hasIncorrectAnswers(): boolean {\n    return this.numberOfIncorrectAnswers() > 0;\n  }\n\n  multipleAnswersGiven(): boolean {\n    return this.givenAnswer.entry.includes(', ');\n  }\n\n  numberOfIncorrectAnswers(): number {\n    return this.givenAnswer.valid.filter( ( valid: boolean ) => !valid ).length;\n  }\n\n  submitForm(): void {\n    this.givenAnswer.valid = this.exam.answerIsCorrect( this.givenAnswer.entry );\n    this.saveGivenAnswerEntry();\n\n    if ( !this.hasIncorrectAnswers() ) {\n      this.resetGivenAnswer();\n      this.updateQuestion();\n    } else if ( this.hasIncorrectAnswers() ) {\n      this.attempt += 1;\n      if ( this.attempt === this.allowedRetries ) {\n        this.resolveQuestionRepeat();\n        this.updateQuestion();\n      }\n    }\n  }\n\n  resetGivenAnswer(): void {\n    this.givenAnswer = {\n      entry: undefined,\n      valid: []\n    };\n  }\n\n  updateQuestion(): void {\n    if ( this.exam.isLastQuestion() ) {\n      this.examService.saveExam( this.exam );\n      this.router.navigate(['score', this.exam.timestamp]);\n    } else {\n      this.exam.incrementQuestion();\n      this.currentQuestion = this.exam.getQuestion();\n      this.resetGivenAnswer();\n    }\n\n    this.attempt = 0;\n  }\n\n  saveGivenAnswerEntry( ): void {\n    this.currentQuestion.givenAnswers.push( Object.assign({}, this.givenAnswer) );\n  }\n\n  // TODO: when refactoring, move this to Exam model\n  getAllowedRetries( examSettings: IExamSettings ): number {\n    if ( examSettings.retry === 'None') {\n      return this.allowedRetries = 1;\n    } else if ( examSettings.retry === 'Once') {\n      return this.allowedRetries = 2;\n    } else if ( examSettings.retry === 'Twice' ) {\n      return this.allowedRetries = 3;\n    } else {\n      return;\n    }\n  }\n\n  // TODO: when refactoring, move this to Exam model\n  resolveQuestionRepeat(): void {\n    if ( this.exam.settings.repeat === 'Repeat until answered correctly') {\n      this.exam.appendQuestion( this.currentQuestion );\n    }\n  }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-landing',\n  templateUrl: './landing.component.html',\n  styleUrls: ['./landing.component.scss']\n})\nexport class LandingComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div id=\"landing\">\n  <div class=\"column\">\n    <div class=\"column\">\n      <div class=\"content\">\n        <h1 class=\"font-xxl\">Kotoba</h1>\n      </div>\n    </div>\n\n    <div class=\"column two\">\n      <div class=\"content\">\n        <p>\n          Memorize Japanese characters and vocabulary. Let's get cramming!\n        </p>\n        <app-login></app-login>\n      </div>\n    </div>\n  </div>\n</div>\n\n\n","<div id=\"lobby\" *ngIf=\"currentUser\">\n\n  <div class=\"column\">\n    <div class=\"column\">\n      <div class=\"content\">\n        <h1>Lobby</h1>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"column\">\n    <div class=\"column two\">\n      <div class=\"column\">\n        <div class=\"content\">\n          <fieldset class=\"reduce-fs-padding\">\n            <legend>\n              <h2>Kana</h2>\n            </legend>\n            <ul class=\"btn-group vertical\">\n              <ng-container *ngFor=\"let availableExam of availableExams\">\n                <li *ngIf=\"availableExam.category === 'kana'\" >\n                  <button class=\"btn btn-secondary\" [ngClass]=\"selectedAvailableExam.id === availableExam.id ? 'active' : null\"\n                          (click)=\"selectAvailableExam( availableExam )\"\n                          title=\"{{ availableExam.title }}\">{{ availableExam.title }}</button>\n                </li>\n              </ng-container>\n            </ul>\n          </fieldset>\n        </div>\n        <div class=\"column\">\n          <div class=\"content\">\n            <fieldset class=\"reduce-fs-padding\">\n              <legend>\n                <h2>Kanji</h2>\n              </legend>\n              <ul class=\"btn-group vertical\">\n                <ng-container *ngFor=\"let availableExam of availableExams\">\n                  <li *ngIf=\"availableExam.category === 'kanji'\" >\n                    <button class=\"btn btn-secondary\"\n                            [disabled]=\"availableExam.dataSets.length === 0\"\n                            [ngClass]=\"selectedAvailableExam.id === availableExam.id ? 'active' : null\"\n                            (click)=\"selectAvailableExam( availableExam )\"\n                            title=\"{{ availableExam.title }}\">\n                      {{ availableExam.title }}\n                    </button>\n                  </li>\n                </ng-container>\n              </ul>\n            </fieldset>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"column two\">\n      <div class=\"content\">\n        <div class=\"selected-exam\" *ngIf=\"selectedAvailableExam\">\n          <form (ngSubmit)=\"submitSelectedExam()\">\n            <fieldset>\n              <legend>\n                <h2>{{ selectedAvailableExam.title}} </h2>\n              </legend>\n              <small class=\"highlight\">\n                {{ selectedAvailableExam.description }}\n              </small>\n              <p>\n                The settings below only affect the current exam.\n                To change your default global settings,  <a class=\"bold highlight\" title=\"settings\" routerLink=\"/settings\">click here</a>.\n              </p>\n              <h4>Exam settings</h4>\n              <!--The retries and inc. answers repeating settings must reflect the global settings in profile > settings by default.-->\n              <!--Changing these settings in the lobby will then only apply to this current-->\n              <!--exam and global settings remain unchanged-->\n              <div class=\"form-group\">\n                <label for=\"retry-select\">Allowed retries per question</label>\n                <select id=\"retry-select\"\n                        name=\"retry-setting\"\n                        [(ngModel)]=\"examSettings.retry\">\n                  <option *ngFor=\"let retryOption of examOptions.retry\"\n                          value=\"{{ retryOption }}\"\n                          title=\"{{ retryOption }}\">{{ retryOption }}</option>\n                </select>\n              </div>\n\n              <div class=\"form-group\">\n                <label for=\"repeat-select\">Repeat incorrectly answered questions</label>\n                <p>\n                  By default, questions you answered incorrectly will be repeated again at the end of your exam\n                  until you answer them correctly. You may also choose to disable this.\n                  <!--and add some other options later maybe-->\n                </p>\n                <select id=\"repeat-select\"\n                        name=\"repeat-setting\"\n                        [(ngModel)]=\"examSettings.repeat\">\n                  <option *ngFor=\"let repeatOption of examOptions.repeat\"\n                          value=\"{{ repeatOption }}\"\n                          title=\"{{ repeatOption}}\">{{ repeatOption }}</option>\n                </select>\n              </div>\n\n              <div class=\"form-group\">\n                <label for=\"method-select\">Method</label>\n                <select id=\"method-select\"\n                        name=\"method-setting\"\n                        [(ngModel)]=\"examSettings.method\">\n                  <option *ngFor=\"let method of selectedAvailableExam.methods\"\n                          title=\"{{ method }}\"\n                          value=\"{{ method }}\">{{ method }}</option>\n                </select>\n              </div>\n              <button type=\"submit\"\n                      title=\"Start exam\"\n                      class=\"btn btn-primary btn-main\">Start Exam</button>\n            </fieldset>\n          </form>\n        </div>\n      </div>\n    </div>\n  </div>\n\n</div>\n","import { Component } from '@angular/core';\nimport { Router} from '@angular/router';\n\nimport { User } from '../../model/user/user.model';\n\nimport { UserService } from '../../services/user/user.service';\nimport { DataSetService } from '../../services/dataset/data-set.service';\nimport { ExamService } from '../../services/exam/exam.service';\nimport { SettingsService } from '../../services/settings/settings.service';\n\nimport { IAvailableExam } from '../../model/interfaces/available-exam.interface';\nimport { IExamSettings } from '../../model/interfaces/exam-settings.interface';\nimport { IExamOptions } from '../../model/interfaces/exam-options.interface';\nimport { ISettings } from '../../model/interfaces/settings.interface';\n\n@Component({\n  selector: 'app-lobby',\n  templateUrl: './lobby.component.html',\n  styleUrls: ['./lobby.component.scss']\n})\nexport class LobbyComponent {\n  currentUser: User;\n  currentSettings: ISettings;\n  availableExams: IAvailableExam[];\n  examSettings: IExamSettings = {\n    retry: undefined,\n    repeat: undefined,\n    method: undefined,\n  };\n  examOptions: IExamOptions;\n\n  selectedAvailableExam: IAvailableExam;\n\n  constructor( private userService: UserService,\n               private datasetService: DataSetService,\n               private examService: ExamService,\n               private router: Router,\n               private settingsService: SettingsService ) {\n    this.currentSettings = this.settingsService.getSettings();\n    this.currentUser = this.userService.getCurrentUser();\n    this.availableExams = this.datasetService.getAvailableExams();\n    this.examOptions = this.settingsService.getExamOptions();\n    this.selectAvailableExam(  this.availableExams[0] );\n    this.examSettings.retry = this.currentSettings.examSettings.retry;\n    this.examSettings.repeat = this.currentSettings.examSettings.repeat;\n  }\n\n  selectAvailableExam( availableExam: IAvailableExam ): void {\n    this.selectedAvailableExam = availableExam;\n    this.examSettings.method = availableExam.methods[1];\n  }\n\n  submitSelectedExam(): void {\n    this.examService.createExam( this.selectedAvailableExam, this.examSettings );\n    this.router.navigate(['exam']);\n  }\n}\n","<form #loginForm=\"ngForm\" id=\"login-form\" (ngSubmit)=\"submitForm()\">\n  <div class=\"form-group\">\n    <label for=\"username-input\"></label>\n    <input [(ngModel)]=\"user.name\" #username=\"ngModel\"\n           name=\"username\"\n           id=\"username-input\"\n           type=\"text\"\n           placeholder=\"Your username\"\n           autocomplete=\"off\"\n           minlength=\"1\"\n           autofocus\n           required>\n    <button class=\"btn btn-primary btn-main\"\n            type=\"submit\" [disabled]=\"loginForm.invalid\">Submit</button>\n    <div *ngIf=\"username.dirty\">\n      <p *ngIf=\"username.invalid\" class=\"invalid-color\">Your username is invalid</p>\n    </div>\n  </div>\n</form>\n","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { UserService } from '../../services/user/user.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit {\n  user = {\n    name: undefined\n  };\n  constructor( private router: Router, private userService: UserService ) {}\n\n  ngOnInit(): void {\n  }\n\n  submitForm(): void {\n    this.saveToLocalStorage( this.user );\n    this.userService.setCurrentUser( this.user.name );\n    this.router.navigate(['lobby']);\n  }\n\n  saveToLocalStorage( user ): void {\n    localStorage.setItem('ktb-username', user.name );\n  }\n}\n","import { Component, OnInit } from '@angular/core';\n\nimport { User } from '../../model/user/user.model';\n\nimport { UserService } from '../../services/user/user.service';\n\n@Component({\n  selector: 'app-profile',\n  templateUrl: './profile.component.html',\n  styleUrls: ['./profile.component.scss']\n})\nexport class ProfileComponent implements OnInit {\n  currentUser: User;\n  constructor( private userService: UserService ) {\n    this.currentUser = this.userService.getCurrentUser();\n  }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div id=\"profile\">\n  <div class=\"column\">\n    <div class=\"content\">\n      <h1>Your profile</h1>\n    </div>\n  </div>\n  <div class=\"column\">\n    <div class=\"column two\">\n      <div class=\"content\">\n        <fieldset>\n          <legend>\n            <h2>{{ currentUser.username }}</h2>\n          </legend>\n          <ul>\n            <li>\n              <a title=\"Settings\" routerLink=\"/settings\" routerLinkActive=\"active\">Settings</a>\n            </li>\n            <!--<li>-->\n            <!--<a title=\"Custom lists\" routerLink=\"/lobby\" routerLinkActive=\"active\">Custom lists</a>-->\n            <!--</li>-->\n            <!--if settings general/progress is checked-->\n            <li>\n              <a title=\"Score history\" routerLink=\"/score-history\" routerLinkActive=\"active\">Your score history</a>\n            </li>\n          </ul>\n        </fieldset>\n      </div>\n    </div>\n    <!--<div class=\"column two\">-->\n      <!--<div class=\"content\">-->\n        <!---->\n      <!--</div>-->\n    <!--</div>-->\n  </div>\n</div>\n","<div id=\"score-history\">\n  <div class=\"column\">\n    <div class=\"column\">\n      <div class=\"content\">\n        <h1>Score history</h1>\n      </div>\n    </div>\n    <div class=\"column\">\n      <div class=\"content\">\n        <fieldset>\n          <legend>\n            <h2>Your exams</h2>\n          </legend>\n          <p *ngIf=\"!exams.length\">\n            You don't have an exam history yet\n          </p>\n          <ul *ngIf=\"exams.length\">\n            <li *ngFor=\"let exam of exams\">\n              <a [routerLink]=\"['/score', exam.timestamp]\" title=\"\">{{ exam.title }} - {{ exam.timestamp | date: 'dd-MM-yyyy hh:mm:ss' }}</a>\n            </li>\n          </ul>\n        </fieldset>\n      </div>\n    </div>\n  </div>\n</div>\n","import { Component } from '@angular/core';\nimport { ExamService } from '../../services/exam/exam.service';\nimport { Exam } from '../../model/exam/exam.model';\n\n@Component({\n  selector: 'app-score-history',\n  templateUrl: './score-history.component.html',\n  styleUrls: ['./score-history.component.scss']\n})\nexport class ScoreHistoryComponent {\n  exams: Exam[];\n  constructor( private examService: ExamService ) {\n    this.exams = this.examService.getExams();\n  }\n}\n\n","<div id=\"scoresheet\">\n  <div class=\"column\">\n    <div class=\"content\">\n      <h1>Score</h1>\n    </div>\n  </div>\n  <div class=\"column\">\n    <div class=\"column two\">\n      <div class=\"content\">\n          <fieldset *ngIf=\"exam\">\n            <legend>\n              <h2>Overview</h2>\n            </legend>\n            <div class=\"column\">\n              <div class=\"column column-mobile three\">\n                <h3>Question</h3>\n              </div>\n              <div class=\"column column-mobile three b\">\n                <h3>Answers</h3>\n              </div>\n            </div>\n            <div class=\"column single-entry-item\" *ngFor=\"let entry of exam.getQuestions()\">\n              <div class=\"column column-mobile three\">\n                <span class=\"highlight\">{{ entry.question }}</span>\n              </div>\n              <div class=\"column column-mobile three b\">\n                <!--TODO: !answer.valid no longer exists, incorrect-class never applied-->\n                <span class=\"entries\"\n                      [ngClass]=\"{'incorrect-entry': !answer.valid }\"\n                      *ngFor=\"let answer of entry.givenAnswers\">{{ answer.entry }}</span>\n              </div>\n            </div>\n          </fieldset>\n      </div>\n    </div>\n    <div class=\"column two\">\n      <div class=\"content\">\n        <fieldset>\n          <legend>\n            <h2>Stats</h2>\n          </legend>\n          <ul class=\"stats\">\n            <li>\n              <span>{{ exam.settings.method }}</span>\n            </li>\n            <li>\n              <div class=\"column\">\n                <div class=\"column two\">\n                  <h4>Date</h4>\n                </div>\n                <div class=\"column two\">\n                  <span>{{ exam.timestamp | date: 'dd-MM-yyyy' }}</span>\n                </div>\n              </div>\n            </li>\n            <li>\n              <div class=\"column two\">\n                <h4>Duration</h4>\n              </div>\n              <div class=\"column two\">\n                <div class=\"column two\">\n                  <!--TODO: is placeholder, need actual time duration here-->\n                  <span>{{ exam.timestamp | date: 'hh:mm:ss' }}</span>\n                </div>\n              </div>\n            </li>\n            <li>\n              <div class=\"column\">\n                <div class=\"column two\">\n                  <h4>Total questions</h4>\n                </div>\n                <div class=\"column two\">\n                  <span>{{ exam.getQuestions().length }}</span>\n                </div>\n              </div>\n            </li>\n            <li>\n              <div class=\"column\">\n                <div class=\"column two\">\n                  <h4>Number of correct answers</h4>\n                </div>\n                <div class=\"column two\">\n                  <span>{{ exam.numberOfCorrectAnswers() }}</span>\n                </div>\n              </div>\n            </li>\n            <li>\n              <div class=\"column\">\n                <div class=\"column two\">\n                  <h4>Number of wrong answers</h4>\n                </div>\n                <div class=\"column two\">\n                  <span>{{ exam.numberOfIncorrectAnswers() }}</span>\n                </div>\n              </div>\n            </li>\n            <li>\n              <div class=\"column\">\n                <div class=\"column two\">\n                  <h4>Total score</h4>\n                </div>\n                <div class=\"column two\">\n                  <span>{{ exam.getScore() }}%</span>\n                </div>\n              </div>\n            </li>\n          </ul>\n        </fieldset>\n      </div>\n    </div>\n  </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport {ExamService} from '../../../services/exam/exam.service';\nimport {Exam} from '../../../model/exam/exam.model';\n\n@Component({\n  selector: 'app-scoresheet',\n  templateUrl: './score-sheet.component.html',\n  styleUrls: ['./score-sheet.component.scss']\n})\nexport class ScoreSheetComponent implements OnInit {\n  exam: Exam;\n\n  constructor( private examService: ExamService, private route: ActivatedRoute ) {}\n\n  ngOnInit(): void {\n    this.route.paramMap.subscribe( paramMap => this.exam = this.examService.getExam( paramMap.get( 'timestamp' ) ) );\n  }\n  // TODO: if user has local record disabled, throw local storage scoresheet away after navigating away from score sheet\n}\n","<div id=\"settings\">\n  <div class=\"column\">\n    <div class=\"content\">\n        <h1>Settings</h1>\n    </div>\n  </div>\n  <div class=\"column\">\n    <form (ngSubmit)=\"updateSettings()\">\n      <div class=\"column two\">\n        <div class=\"content\">\n          <fieldset>\n            <legend>\n              <h2>Exams</h2>\n            </legend>\n            <h3>Incorrect answers</h3>\n            <p>\n              Set your preference on handling incorrectly answered questions.\n            </p>\n            <div class=\"form-group\">\n              <label for=\"retry-select\">Allowed retries per question</label>\n              <p>\n                The amount of retries allowed before moving on to the next question\n              </p>\n              <select [(ngModel)]=\"currentSettings.examSettings.retry\" name=\"retry\" id=\"retry-select\">\n                <option value=\"{{ retryOption }}\"\n                        title=\"{{ retryOption }}\"\n                        *ngFor=\"let retryOption of examOptions.retry\"\n                        [defaultSelected]=\"currentSettings.examSettings.retry === retryOption\">\n                  {{ retryOption }}\n                </option>\n              </select>\n            </div>\n\n            <div class=\"form-group\">\n              <label for=\"repeat-select\">Repeat incorrectly answered questions</label>\n              <p>\n                By default, questions you answered incorrectly will be repeated again at the end of your exam\n                until you answer them correctly. You may also choose to disable this.\n                <!--and add some other options later maybe-->\n              </p>\n              <select [(ngModel)]=\"currentSettings.examSettings.repeat \" name=\"repeat\" id=\"repeat-select\">\n                <option value=\"{{ repeatOption }}\"\n                        title=\"{{ repeatOption }}\"\n                        *ngFor=\"let repeatOption of examOptions.repeat\"\n                        [defaultSelected]=\"currentSettings.examSettings.repeat === repeatOption\">\n                  {{ repeatOption }}\n                </option>\n              </select>\n            </div>\n          </fieldset>\n        </div>\n      </div>\n      <div class=\"column two\">\n        <div class=\"content\">\n          <fieldset>\n            <legend>\n              <h2>Visual preference</h2>\n            </legend>\n            <h3>Theme</h3>\n            <div class=\"form-group\">\n              <label for=\"color-selection\"></label>\n              <select [(ngModel)]=\"currentSettings.visualSettings.theme\"\n                      name=\"theme\"\n                      id=\"color-selection\">\n                <option value=\"{{ themeOption }}\"\n                        title=\"{{ themeOption }}\"\n                        *ngFor=\"let themeOption of visualOptions.theme\"\n                        [defaultSelected]=\"currentSettings.visualSettings.theme === themeOption\">\n                  {{ themeOption | titlecase }}\n                </option>\n              </select>\n            </div>\n\n            <h3>Text preference</h3>\n            <div class=\"form-group\">\n              <label for=\"font-preference\">Font style</label>\n              <select [(ngModel)]=\"currentSettings.visualSettings.font\"\n                      name=\"font\"\n                      id=\"font-preference\">\n                <option value=\"{{ fontOption }}\"\n                        title=\"{{ fontOption }}\"\n                        *ngFor=\"let fontOption of visualOptions.font\"\n                        [defaultSelected]=\"currentSettings.visualSettings.font === fontOption\">\n                  {{ fontOption | titlecase }}\n                </option>\n              </select>\n            </div>\n\n            <div class=\"form-group\">\n              <label for=\"font-size\">Font size</label>\n              <select [(ngModel)]=\"currentSettings.visualSettings.fontSize\"\n                      name=\"font-size\"\n                      id=\"font-size\">\n                <option value=\"{{ fontSizeOption }}\"\n                        title=\"{{ fontSizeOption }}\"\n                        *ngFor=\"let fontSizeOption of visualOptions.fontSize\"\n                        [defaultSelected]=\"currentSettings.visualSettings.fontSize === fontSizeOption\">\n                  {{ fontSizeOption | titlecase }}\n                </option>\n              </select>\n            </div>\n          </fieldset>\n        </div>\n      </div>\n      <div class=\"column\">\n        <div class=\"column two\">\n          <div class=\"content\">\n            <fieldset>\n              <legend>\n                <h2>General</h2>\n              </legend>\n              <h3>Score history</h3>\n              <div class=\"form-group\">\n                <input type=\"checkbox\"\n                       title=\"Save local record of scores\"\n                       id=\"history-record\"\n                       name=\"record\" [(ngModel)]=\"currentSettings.generalSettings.record\">\n                <label for=\"history-record\">Keep a local record of your scores</label>\n              </div>\n            </fieldset>\n          </div>\n        </div>\n      </div>\n      <div class=\"column\">\n        <div class=\"column two\">\n          <div class=\"content\">\n            <button type=\"submit\" class=\"btn btn-primary btn-main submit-confirmation\">Save</button>\n          </div>\n        </div>\n      </div>\n    </form>\n  </div>\n</div>\n\n\n\n\n","import { Component, OnInit } from '@angular/core';\n\nimport { SettingsService } from '../../services/settings/settings.service';\n\nimport { ISettings } from '../../model/interfaces/settings.interface';\nimport { IExamOptions } from '../../model/interfaces/exam-options.interface';\nimport { IVisualOptions } from '../../model/interfaces/visual-options.interface';\nimport { IGeneralOptions } from '../../model/interfaces/general-options.interface';\n\n@Component({\n  selector: 'app-settings',\n  templateUrl: './settings.component.html',\n  styleUrls: ['./settings.component.scss']\n})\nexport class SettingsComponent implements OnInit {\n  currentSettings: ISettings;\n  examOptions: IExamOptions;\n  visualOptions: IVisualOptions;\n  generalOptions: IGeneralOptions;\n\n  constructor( private settingsService: SettingsService ) {\n    this.currentSettings = this.settingsService.getSettings();\n    this.examOptions = this.settingsService.getExamOptions();\n    this.visualOptions = this.settingsService.getVisualOptions();\n    this.generalOptions = this.settingsService.getGeneralOptions();\n  }\n\n  ngOnInit(): void {\n  }\n\n  updateSettings(): void {\n    this.settingsService.updateSettings( this.currentSettings );\n  }\n}\n","import { IExamSettings } from '../interfaces/exam-settings.interface';\nimport { IExamQuestion } from '../interfaces/exam-question.interface';\nimport { IDataEntry } from '../interfaces/data-entry.interface';\nimport { IExamGivenAnswer } from '../interfaces/exam-given-answer.interface';\n\nconst PENALTY_WEIGHT = 5;\n\nexport class Exam {\n  timestamp: string;\n  dataSet: IDataEntry[];\n  settings: IExamSettings;\n  title: string;\n  private questionnaire: IExamQuestion[];\n  private currentQuestionIndex = 0;\n\n  constructor( dataSet: IDataEntry[], settings: IExamSettings, title: string, timestamp?: string, questionnaire?: IExamQuestion[] ){\n    this.dataSet = dataSet;\n    this.settings = settings;\n    this.title = title;\n\n    if ( timestamp ) {\n      this.timestamp = timestamp;\n    } else {\n      this.timestamp = Date.now().toString( 10 );\n    }\n\n    if ( questionnaire ) {\n      this.questionnaire = questionnaire;\n    } else {\n      this.initializeQuestionnaire();\n    }\n  }\n\n  currentQuestionNumber(): number {\n    return this.currentQuestionIndex + 1;\n  }\n\n  numberOfCorrectAnswers(): number {\n    let correct = 0;\n\n    this.questionnaire.forEach( ( examEntry: IExamQuestion ) => {\n      examEntry.givenAnswers.forEach( ( givenAnswer: IExamGivenAnswer ) => {\n        correct += givenAnswer.valid.filter( ( valid: boolean ) => valid ).length;\n      } );\n    } );\n\n    return correct;\n  }\n\n  numberOfIncorrectAnswers(): number {\n    let numIncorrect = 0;\n\n    this.questionnaire.forEach( ( examEntry: IExamQuestion ) => {\n      examEntry.givenAnswers.forEach( ( givenAnswer: IExamGivenAnswer ) => {\n        numIncorrect += givenAnswer.valid.filter( ( valid: boolean ) => !valid ).length;\n      } );\n    } );\n\n    return numIncorrect;\n  }\n\n  getQuestions( validOnly?: boolean ): IExamQuestion[] {\n    let answers;\n    if ( validOnly === true ) {\n      answers = this.questionnaire.filter(\n        ( entry: IExamQuestion ) => entry.givenAnswers.filter( ( givenAnswer: IExamGivenAnswer ) => givenAnswer.valid ).length );\n    } else if ( validOnly === false ) {\n      answers = this.questionnaire.filter(\n        ( entry: IExamQuestion ) => !entry.givenAnswers.filter( ( givenAnswer: IExamGivenAnswer ) => givenAnswer.valid ).length );\n    } else {\n      answers = this.questionnaire;\n    }\n\n    return answers;\n  }\n\n  getScore(): number {\n    const baseScore = 100 - ((this.getQuestions( false ).length / this.getQuestions().length) * 100);\n    const penalty = ( this.numberOfIncorrectAnswers() / this.numberOfCorrectAnswers()) * 100;\n\n    return Math.round( baseScore - ( penalty / PENALTY_WEIGHT ));\n  }\n\n  incrementQuestion(): void {\n    this.currentQuestionIndex++;\n  }\n\n  isLastQuestion(): boolean {\n    return this.currentQuestionIndex === this.questionnaire.length - 1;\n  }\n\n  getQuestion(): IExamQuestion {\n    return this.questionnaire[ this.currentQuestionIndex ];\n  }\n\n  answerIsCorrect( answer: string ): boolean[] {\n    const givenAnswers = answer.toLowerCase().replace(/ /g, '' ).split(',');\n\n    if ( givenAnswers.length > this.questionnaire[ this.currentQuestionIndex ].answers.length ) {\n      return [false];\n    }\n\n    return givenAnswers\n      .map( ( givenAnswer: string ) => this.questionnaire[ this.currentQuestionIndex ].answers.includes( givenAnswer ) );\n  }\n\n  appendQuestion( question: IExamQuestion ): void {\n    const repeatedQuestion = Object.assign( {}, question );\n    repeatedQuestion.givenAnswers = [];\n    this.questionnaire.push( repeatedQuestion );\n  }\n\n  private initializeQuestionnaire(): void {\n    this.questionnaire = this.dataSet.map( this.createQuestion.bind( this ));\n    this.shuffleOrder( this.questionnaire );\n  }\n\n  private createQuestion( dataEntry: IDataEntry ): IExamQuestion {\n    const question = {\n      givenAnswers: []\n    };\n\n    switch ( this.settings.method ) {\n      // Hiragana exams\n      case 'Hiragana to romaji':\n        return Object.assign(question, {\n          question: dataEntry[dataEntry.dataSet],\n          answers: dataEntry.romaji.kun,\n          placeholder: 'Romaji',\n          dataSet: dataEntry.dataSet,\n        });\n      case 'Romaji to hiragana':\n        return Object.assign(question, {\n          question: dataEntry.romaji.kun.join(', '),\n          answers: dataEntry.kana.kun,\n          placeholder: 'Hiragana',\n          dataSet: dataEntry.dataSet,\n        });\n        // TODO: add mixed hiragana\n      case 'Katakana to romaji':\n        return Object.assign(question, {\n          question: dataEntry[dataEntry.dataSet],\n          answers: dataEntry.romaji.on,\n          placeholder: 'Romaji',\n          dataSet: dataEntry.dataSet,\n        });\n      case 'Romaji to katakana':\n        return Object.assign(question, {\n          question: dataEntry.romaji.on.join(', '),\n          answers: dataEntry.kana.on,\n          placeholder: 'Katakana',\n          dataSet: dataEntry.dataSet,\n        });\n        // TODO: add mixed katakana\n      case 'Romaji to kanji':\n        return Object.assign(question, {\n          question: dataEntry.romaji.kun.join( ', ' ),\n          answers: dataEntry.kanji,\n          placeholder: 'Kanji',\n          dataSet: dataEntry.dataSet,\n          hint: dataEntry.english.join( ', ' )\n        });\n        // TODO: now only tested on kunyomi which is probably undesirable\n      case 'Kanji to romaji':\n        return Object.assign(question, {\n          question: dataEntry.kanji.join( ', ' ),\n          answers: dataEntry.romaji.kun,\n          placeholder: 'Kunyomi',\n          dataSet: dataEntry.dataSet,\n          hint: dataEntry.english.join( ', ' )\n        });\n      case 'Kanji to kana - kunyomi':\n        return Object.assign(question, {\n          question: dataEntry.kanji[0],\n          answers: dataEntry.kana.kun,\n          placeholder: 'Kunyomi',\n          dataSet: dataEntry.dataSet\n          // hint: dataEntry.english.join(', ')\n        });\n      case 'Kanji to kana - onyomi':\n        return Object.assign(question, {\n          question: dataEntry.kanji[0],\n          answers: dataEntry.kana.on,\n          placeholder: 'Onyomi',\n          dataSet: dataEntry.dataSet\n          // hint: dataEntry.english.join(', ')\n        });\n      case 'Kana to kanji - kunyomi':\n        return Object.assign(question, {\n          question: dataEntry.kana.kun.join(', '),\n          answers: dataEntry.kanji,\n          placeholder: 'Kanji',\n          dataSet: dataEntry.dataSet\n          // hint: dataEntry.english.join(', ')\n        });\n      case 'Kana to kanji - onyomi':\n        return Object.assign(question, {\n          question: dataEntry.kana.on.join(', '),\n          answers: dataEntry.kanji,\n          placeholder: 'Kanji',\n          dataSet: dataEntry.dataSet\n          // hint: dataEntry.english.join(', ')\n        });\n      case 'Kanji to English':\n        return Object.assign(question, {\n          question: dataEntry.kanji[0],\n          answers: dataEntry.english,\n          placeholder: 'Translation',\n          dataSet: dataEntry.dataSet\n        });\n      case 'English to kanji':\n        return Object.assign(question, {\n          question: dataEntry.english.join( ', ' ),\n          answers: dataEntry.kanji,\n          placeholder: 'Kanji',\n          dataSet: dataEntry.dataSet\n        });\n        // TODO: add shuffle all\n        // TODO: add shuffle kanji & romaji\n    }\n  }\n\n  private shuffleOrder( questionnaire: IExamQuestion[] ): void  {\n    for ( let i = questionnaire.length - 1; i > 0; i-- ) {\n      const random = Math.floor(Math.random() * i);\n      const shuffledQuestionnaire = questionnaire[i];\n      questionnaire[i] = questionnaire[random];\n      questionnaire[random] = shuffledQuestionnaire;\n    }\n  }\n}\n","export class User {\n  username: string;\n  constructor( username: string ) {\n    this.username = username;\n  }\n}\n","import { CanActivate, Router } from '@angular/router';\nimport { Injectable } from '@angular/core';\n\nimport { ExamService } from './services/exam/exam.service';\nimport { UserService } from './services/user/user.service';\n\n@Injectable()\nexport class LoggedInRouteGuard implements CanActivate {\n  constructor( private userService: UserService, private router: Router ) {}\n\n  canActivate(): boolean {\n    const isLoggedIn = this.userService.getCurrentUser() !== undefined;\n    if ( !isLoggedIn ) {\n      this.router.navigate(['login']);\n    } else {\n      return true;\n    }\n  }\n}\n\n@Injectable()\nexport class ExamRouteGuard implements  CanActivate {\n  constructor( private examService: ExamService, private router: Router ) {}\n\n  canActivate(): boolean {\n    const examExists = this.examService.getExam() !== undefined;\n    if ( !examExists ) {\n      this.router.navigate(['lobby']);\n    } else {\n      return true;\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { IAvailableExam } from '../../model/interfaces/available-exam.interface';\nimport { IDataEntry } from '../../model/interfaces/data-entry.interface';\n\nimport availableExams from '../../../datasets/available-exams/available-exams.json';\nimport hiragana from '../../../datasets/kana/hiragana.json';\nimport katakana from '../../../datasets/kana/katakana.json';\nimport kanjiN5 from '../../../datasets/kanji/kanjiN5.json';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataSetService {\n\n  constructor() {}\n\n  getAvailableExams(): IAvailableExam[] {\n    return availableExams;\n  }\n\n  getDataSet( name: string ): IDataEntry[] {\n    let dataSet;\n    switch ( name ) {\n      case DATA_SET_NAME.HIRAGANA:\n        dataSet = hiragana;\n        break;\n      case DATA_SET_NAME.KATAKANA:\n        dataSet = katakana;\n        break;\n      case DATA_SET_NAME.KANJIN5:\n        dataSet = kanjiN5;\n        break;\n    }\n    return dataSet.map( ( dataEntry: IDataEntry ) => ({...dataEntry, dataSet: name}) );\n  }\n}\n\nenum DATA_SET_NAME {\n  HIRAGANA = 'hiragana',\n  KATAKANA = 'katakana',\n  KANJIN5 = 'kanjiN5'\n}\n","import { Injectable } from '@angular/core';\n\nimport { Exam } from '../../model/exam/exam.model';\n\nimport { DataSetService } from '../dataset/data-set.service';\n\nimport { IAvailableExam } from '../../model/interfaces/available-exam.interface';\nimport { IExamSettings } from '../../model/interfaces/exam-settings.interface';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ExamService {\n  private currentExam: Exam;\n  private previousExams: Exam[];\n\n  constructor( private datasetService: DataSetService) {\n    this.retrieveExamRecords();\n  }\n\n  createExam( selectedExam: IAvailableExam, settings: IExamSettings ): void {\n    const dataSet = [];\n\n    for ( const dataSetName of selectedExam.dataSets ) {\n      dataSet.push( ...this.datasetService.getDataSet( dataSetName ) );\n    }\n\n    this.currentExam = new Exam( dataSet, settings, selectedExam.title );\n  }\n\n  getExam( timestamp?: string ): Exam {\n    if ( timestamp ) {\n      return this.previousExams.find( ( exam: Exam ) => exam.timestamp === timestamp );\n    } else {\n      return this.currentExam;\n    }\n  }\n\n  getExams(): Exam[] {\n    return this.previousExams;\n  }\n\n  saveExam( exam: Exam ): void {\n    this.previousExams.push( exam );\n    localStorage.setItem( 'ktb-exam-record', JSON.stringify( this.previousExams ) );\n  }\n\n  private retrieveExamRecords(): void {\n    const examRecords = JSON.parse( localStorage.getItem('ktb-exam-record') ) || [];\n\n    this.previousExams = examRecords.map(\n      ( { dataSet, settings, title, timestamp, questionnaire } ) => new Exam( dataSet, settings, title, timestamp, questionnaire ) ) || [];\n  }\n}\n","import { Injectable } from '@angular/core';\n\nimport { ISettings } from '../../model/interfaces/settings.interface';\nimport { IExamOptions } from '../../model/interfaces/exam-options.interface';\nimport { IVisualOptions } from '../../model/interfaces/visual-options.interface';\nimport { IGeneralOptions } from '../../model/interfaces/general-options.interface';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SettingsService {\n  private settings: ISettings;\n  constructor() {\n    this.retrieveStoredSettings();\n  }\n\n  private retrieveStoredSettings(): void {\n    const settings = JSON.parse(localStorage.getItem('ktb-settings'));\n\n    if ( settings ) {\n      this.settings = settings;\n    } else {\n      this.settings = {\n        examSettings: {\n          retry: 'Twice',\n          repeat: 'Repeat until answered correctly',\n        },\n\n        generalSettings: {\n          record: true,\n        },\n\n        visualSettings: {\n          theme: 'dark-theme',\n          font: 'helvetica',\n          fontSize: 'normal'\n        }\n      };\n      this.updateSettings( this.settings );\n    }\n  }\n\n  getSettings(): ISettings {\n    return this.settings;\n  }\n\n  updateSettings( settings: ISettings ): void {\n    Object.assign( this.settings, settings );\n    localStorage.setItem( 'ktb-settings', JSON.stringify( this.settings ));\n  }\n\n  getExamOptions(): IExamOptions {\n    return  {\n      retry: ['None', 'Once', 'Twice', 'Infinite retries'],\n      repeat: ['Repeat until answered correctly', 'Never repeat']\n    };\n  }\n\n  getVisualOptions(): IVisualOptions {\n    return {\n      theme: ['dark-theme', 'light-theme'],\n      font: ['helvetica', 'montserrat', 'comfortaa'],\n      fontSize: ['normal', 'large', 'xl']\n    };\n  }\n\n  getGeneralOptions(): IGeneralOptions {\n    return {\n      record: [ true, false ]\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\n\nimport { User } from '../../model/user/user.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n  private currentUser: User;\n  constructor() {\n    this.retrieveCurrentUser();\n  }\n\n  private retrieveCurrentUser(): void {\n    const username = localStorage.getItem('ktb-username');\n\n    if ( username ) {\n      this.currentUser = new User( username );\n    }\n  }\n\n  getCurrentUser(): User {\n    return this.currentUser;\n  }\n\n  setCurrentUser( username: string ): void {\n    this.currentUser = new User( username );\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/plugins/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif ( environment.production ) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"names":["RouterModule","AboutComponent","ProfileComponent","LobbyComponent","LandingComponent","ExamComponent","ScoreHistoryComponent","SettingsComponent","ScoreSheetComponent","ExamRouteGuard","LoggedInRouteGuard","routes","path","component","canActivate","pathMatch","redirectTo","AppRoutingModule","forRoot","imports","exports","AppComponent","constructor","router","userService","settingService","settings","getSettings","ngOnInit","onLogin","url","includes","onActivate","window","scroll","selectors","decls","vars","consts","template","i0","ctx","BrowserModule","FormsModule","HammerModule","NavComponent","FooterComponent","LoginComponent","SecondaryNavComponent","UserService","ExamService","DataSetService","SettingsService","ServiceWorkerModule","environment","components","AppModule","bootstrap","register","enabled","production","declarations","NavigationEnd","filter","events","pipe","event","subscribe","menuIsOpen","onSwipeRight","location","back","examService","entry","undefined","valid","exam","getExam","currentSettings","allowedRetries","getAllowedRetries","currentQuestion","getQuestion","onResize","hasIncorrectAnswers","numberOfIncorrectAnswers","multipleAnswersGiven","givenAnswer","length","submitForm","answerIsCorrect","saveGivenAnswerEntry","resetGivenAnswer","updateQuestion","attempt","resolveQuestionRepeat","isLastQuestion","saveExam","navigate","timestamp","incrementQuestion","givenAnswers","push","Object","assign","examSettings","retry","repeat","appendQuestion","datasetService","settingsService","method","currentUser","getCurrentUser","availableExams","getAvailableExams","examOptions","getExamOptions","selectAvailableExam","availableExam","selectedAvailableExam","methods","submitSelectedExam","createExam","name","saveToLocalStorage","user","setCurrentUser","localStorage","setItem","exams","getExams","route","paramMap","get","visualOptions","getVisualOptions","generalOptions","getGeneralOptions","updateSettings","PENALTY_WEIGHT","Exam","dataSet","title","questionnaire","Date","now","toString","initializeQuestionnaire","currentQuestionNumber","currentQuestionIndex","numberOfCorrectAnswers","correct","forEach","examEntry","numIncorrect","getQuestions","validOnly","answers","getScore","baseScore","penalty","Math","round","answer","toLowerCase","replace","split","map","question","repeatedQuestion","createQuestion","bind","shuffleOrder","dataEntry","romaji","kun","placeholder","join","kana","on","kanji","hint","english","i","random","floor","shuffledQuestionnaire","User","username","isLoggedIn","factory","examExists","hiragana","katakana","kanjiN5","getDataSet","DATA_SET_NAME","HIRAGANA","KATAKANA","KANJIN5","providedIn","retrieveExamRecords","selectedExam","dataSetName","dataSets","currentExam","previousExams","find","JSON","stringify","examRecords","parse","getItem","retrieveStoredSettings","generalSettings","record","visualSettings","theme","font","fontSize","retrieveCurrentUser","enableProdMode","__NgCli_bootstrap_1","bootstrapModule","catch","err","console","error"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}